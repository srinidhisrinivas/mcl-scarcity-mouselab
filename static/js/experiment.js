// Generated by CoffeeScript 1.12.7
var CONDITION, DEBUG, JUMP_TO_BLOCK, PARAMS, SCORE, STRUCTURE_TRAINING, TRIALS_INNER_REVEALED, TRIALS_TRAINING, calculateBonus, createStartButton, delay, getActionTrials, getTrainingTrials, getTrialsWithInnerRevealed, initializeExperiment, loadTimeout, psiturk, saveData, slowLoad,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DEBUG = true;

CONDITION = 0;

JUMP_TO_BLOCK = 0;

TRIALS_TRAINING = void 0;

TRIALS_TRAINING = void 0;

TRIALS_INNER_REVEALED = void 0;

STRUCTURE_TRAINING = void 0;

SCORE = 0;

calculateBonus = void 0;

getTrainingTrials = void 0;

getTrialsWithInnerRevealed = void 0;

getActionTrials = void 0;

PARAMS = [
  {
    inspectCost: 1,
    bonusRate: .002
  }
];

_.mapObject = mapObject;

psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

delay = function(time, func) {
  return setTimeout(func, time);
};

slowLoad = function() {
  var ref;
  return (ref = $('slow-load')) != null ? ref.show() : void 0;
};

loadTimeout = delay(12000, slowLoad);

if (DEBUG) {
  JUMP_TO_BLOCK = window.prompt('skip to block number?', 0);
}

createStartButton = function() {
  document.getElementById('loader').style.display = 'none';
  document.getElementById('successLoad').style.display = 'block';
  document.getElementById('failLoad').style.display = 'none';
  return $('#load-btn').click(initializeExperiment);
};

saveData = function() {
  return new Promise(function(resolve, reject) {
    var timeout;
    timeout = delay(10000, function() {
      return reject('timeout');
    });
    return psiturk.saveData({
      error: function() {
        clearTimeout(timeout);
        console.log('Error saving data!');
        return reject('error');
      },
      success: function() {
        clearTimeout(timeout);
        console.log('Data saved to psiturk server.');
        return resolve();
      }
    });
  });
};

$(window).resize(function() {
  return checkWindowSize(800, 600, $('#jspsych-target'));
});

$(window).resize();

$(window).on('load', function() {
  slowLoad = function() {
    var ref;
    return (ref = $('slow-load')) != null ? ref.show() : void 0;
  };
  loadTimeout = delay(12000, slowLoad);
  psiturk.preloadImages(['static/images/spider.png']);
  return delay(300, function() {
    var TRIALS_ACTION;
    console.log('Loading data');
    STRUCTURE_TRAINING = loadJson('static/json/structure/312.json');
    TRIALS_TRAINING = loadJson('static/json/mcrl_trials/increasing.json');
    TRIALS_ACTION = loadJson('static/json/demo/312_action.json');
    TRIALS_INNER_REVEALED = loadJson('static/json/demo/312_inner_revealed.json');
    console.log("loaded " + (TRIALS_TRAINING != null ? TRIALS_TRAINING.length : void 0) + " training trials");
    getTrainingTrials = (function() {
      var idx, t;
      t = _.shuffle(TRIALS_TRAINING);
      idx = 0;
      return function(n) {
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    getTrialsWithInnerRevealed = (function() {
      var idx, t;
      t = _.shuffle(TRIALS_INNER_REVEALED);
      idx = 0;
      return function(n) {
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    getActionTrials = (function() {
      var idx, t;
      t = _.shuffle(TRIALS_ACTION);
      idx = 0;
      return function(n) {
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    console.log('Testing saveData');
    return saveData().then(function() {
      clearTimeout(loadTimeout);
      return delay(500, createStartButton);
    })["catch"](function() {
      clearTimeout(loadTimeout);
      return $('#data-error').show();
    });
  });
});

createStartButton = function() {
  initializeExperiment();
  $('#load-icon').hide();
  $('#slow-load').hide();
  $('#success-load').show();
  return $('#load-btn').click(initializeExperiment);
};

initializeExperiment = function() {
  var Block, ButtonBlock, MouselabBlock, QuizLoop, TextBlock, demo_trial, divider, experiment_timeline, finish, prompt_resubmit, quiz, reprompt, reset_score, save_data, survey, text, training_no_FB, training_with_actions_FB, training_with_inner_revealed, training_with_optimal_FB, welcome;
  $('#jspsych-target').html('');
  console.log('INITIALIZE EXPERIMENT');
  text = '';
  Block = (function() {
    function Block(config) {
      _.extend(this, config);
      this._block = this;
      if (this._init != null) {
        this._init();
      }
    }

    return Block;

  })();
  TextBlock = (function(superClass) {
    extend(TextBlock, superClass);

    function TextBlock() {
      return TextBlock.__super__.constructor.apply(this, arguments);
    }

    TextBlock.prototype.type = 'text';

    TextBlock.prototype.cont_key = [];

    return TextBlock;

  })(Block);
  ButtonBlock = (function(superClass) {
    extend(ButtonBlock, superClass);

    function ButtonBlock() {
      return ButtonBlock.__super__.constructor.apply(this, arguments);
    }

    ButtonBlock.prototype.type = 'button-response';

    ButtonBlock.prototype.is_html = true;

    ButtonBlock.prototype.choices = ['Continue'];

    ButtonBlock.prototype.button_html = '<button class="btn btn-primary btn-lg">%choice%</button>';

    return ButtonBlock;

  })(Block);
  QuizLoop = (function(superClass) {
    extend(QuizLoop, superClass);

    function QuizLoop() {
      return QuizLoop.__super__.constructor.apply(this, arguments);
    }

    QuizLoop.prototype.loop_function = function(data) {
      var c, i, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          return true;
        }
      }
      return false;
    };

    return QuizLoop;

  })(Block);
  MouselabBlock = (function(superClass) {
    extend(MouselabBlock, superClass);

    function MouselabBlock() {
      return MouselabBlock.__super__.constructor.apply(this, arguments);
    }

    MouselabBlock.prototype.type = 'mouselab-mdp';

    MouselabBlock.prototype.playerImage = 'static/images/spider.png';

    MouselabBlock.prototype.lowerMessage = "<b>Clicking on a node reveals its value for a $1 fee.<br>\nMove with the arrow keys.</b>";

    return MouselabBlock;

  })(Block);
  QuizLoop = (function(superClass) {
    extend(QuizLoop, superClass);

    function QuizLoop() {
      return QuizLoop.__super__.constructor.apply(this, arguments);
    }

    QuizLoop.prototype.loop_function = function(data) {
      var c, i, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          return true;
        }
      }
      return false;
    };

    return QuizLoop;

  })(Block);
  welcome = new TextBlock({
    text: function() {
      return "<h1>Mouselab-MDP Demo</h1>\n\n<p>\n  This is a demonstration of the Mouselab-MDP plugin.\n</p>\n<p>\n  Press <b>space</b> to continue.\n</p>";
    }
  });
  finish = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown("# You've completed the HIT\n\nThanks for participating. We hope you had fun! Based on your\nperformance in Stage 1 and Stage 2, you will be awarded a bonus of\n**$" + (calculateBonus().toFixed(2)) + "** on top of your base pay of $1.90.\n\nPlease briefly answer the questions below before you submit the HIT.");
    },
    questions: ['How old are you?', 'Which gender do you identify with?'],
    rows: [4, 4, 1, 1],
    button: 'Submit HIT'
  });
  reset_score = new Block({
    type: 'call-function',
    func: function() {
      return SCORE = 0;
    }
  });
  divider = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<div style='text-align: center;'> Press <code>space</code> to continue.</div>";
    }
  });
  survey = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown("# Just one question ...\n");
    },
    questions: ['What have you learned? What are you doing differently now from what you were doing at the beginning of this training session?'],
    button: 'Finish'
  });
  quiz = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions about the *Flight Planning* game.\n");
    },
    type: 'survey-multi-choice',
    questions: ["What is the range of node values?", "What is the cost of clicking on a node to find out its value?", "Will each round be the same?"],
    options: [['$0 to $50', '$-10 to $10', '$-48 to $48', '$-100 to $100'], ['$0', '$1', '$5', '$10'], ['Yes.', 'No, the amount of cash at each node of the web may be different each time.', 'No, the structure of the web will be different each time.']],
    required: [true, true, true],
    correct: ['$-48 to $48', '$1', 'No, the amount of cash at each node of the web may be different each time.']
  });
  demo_trial = new MouselabBlock({
    show_feedback: false,
    blockName: 'training',
    stateDisplay: 'click',
    stateClickCost: 1,
    timeline: [
      {
        stateRewards: {
          A: 10,
          B: 0,
          C: 0
        }
      }
    ],
    startScore: 50,
    centerMessage: 'Demo trial',
    playerImageScale: 0.3,
    size: 120,
    _init: function() {
      _.extend(this, {
        graph: {
          B: {
            up: [5, 'A'],
            down: [-5, 'C']
          },
          A: {},
          C: {}
        },
        layout: {
          A: [0, 1],
          B: [0, 2],
          C: [0, 3]
        },
        initial: 'B'
      });
      this.playerImage = 'static/images/plane.png';
      return this.trialCount = 0;
    }
  });
  training_no_FB = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'training',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: getTrainingTrials(2),
    startScore: 50,
    centerMessage: 'No feedback',
    _init: function() {
      _.extend(this, STRUCTURE_TRAINING);
      this.playerImage = 'static/images/plane.png';
      return this.trialCount = 0;
    }
  });
  training_with_actions_FB = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'training',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: getActionTrials(2),
    startScore: 50,
    centerMessage: 'Actions feedback',
    _init: function() {
      _.extend(this, STRUCTURE_TRAINING);
      this.playerImage = 'static/images/plane.png';
      return this.trialCount = 0;
    }
  });
  training_with_optimal_FB = new MouselabBlock({
    minTime: 7,
    show_feedback: true,
    blockName: 'training',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: getTrainingTrials(2),
    startScore: 50,
    centerMessage: 'Optimal feedback',
    _init: function() {
      _.extend(this, STRUCTURE_TRAINING);
      this.playerImage = 'static/images/plane.png';
      return this.trialCount = 0;
    }
  });
  training_with_inner_revealed = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'training',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: getTrialsWithInnerRevealed(2),
    startScore: 50,
    centerMessage: 'Inner nodes revealed',
    _init: function() {
      _.extend(this, STRUCTURE_TRAINING);
      this.playerImage = 'static/images/plane.png';
      return this.trialCount = 0;
    }
  });
  if (CONDITION === 0) {
    experiment_timeline = [training_with_inner_revealed, training_no_FB, training_with_actions_FB, training_with_optimal_FB, demo_trial, finish];
  } else if (CONDITION === 1) {
    experiment_timeline = [welcome, quiz, finish];
  }
  experiment_timeline = experiment_timeline.slice(JUMP_TO_BLOCK);
  calculateBonus = function() {
    var bonus;
    bonus = SCORE * PARAMS.bonusRate;
    bonus = (Math.round(bonus * 100)) / 100;
    return Math.max(0, bonus);
  };
  reprompt = null;
  save_data = function() {
    return psiturk.saveData({
      success: function() {
        console.log('Data saved to psiturk server.');
        if (reprompt != null) {
          window.clearInterval(reprompt);
        }
        await($.ajax("complete_exp", {
          type: "POST",
          data: {
            uniqueId: uniqueId
          }
        }));
        return psiturk.computeBonus('compute_bonus', psiturk.completeHIT);
      },
      error: function() {
        return prompt_resubmit;
      }
    });
  };
  prompt_resubmit = function() {
    $('#jspsych-target').html("<h1>Oops!</h1>\n<p>\nSomething went wrong submitting your HIT.\nThis might happen if you lose your internet connection.\nPress the button to resubmit.\n</p>\n<button id=\"resubmit\">Resubmit</button>");
    return $('#resubmit').click(function() {
      $('#jspsych-target').html('Trying to resubmit...');
      reprompt = window.setTimeout(prompt_resubmit, 10000);
      return save_data();
    });
  };
  return jsPsych.init({
    display_element: $('#jspsych-target'),
    timeline: experiment_timeline,
    on_finish: function() {
      if (DEBUG) {
        return jsPsych.data.displayData();
      } else {
        psiturk.recordUnstructuredData('final_bonus', calculateBonus());
        return save_data();
      }
    },
    on_data_update: function(data) {
      return console.log('data', data);
    }
  });
};
